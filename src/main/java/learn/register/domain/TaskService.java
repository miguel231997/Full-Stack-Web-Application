package learn.register.domain;

import learn.register.models.Task;
import learn.register.data.TaskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TaskService {

    private final TaskRepository taskRepository;

    @Autowired
    public TaskService(TaskRepository taskRepository) {
        this.taskRepository = taskRepository;
    }

    // Fetch all tasks from each user
    public Result<List<Task>> findAllTasks(Long userId) {
        Result<List<Task>> result = new Result<>();
        List<Task> tasks = taskRepository.findAllTasksByUserId(userId);

        if (tasks.isEmpty()) {
            result.setType(ResultType.NOT_FOUND);
            result.setMessage("No tasks found.");
        } else {
            result.setType(ResultType.SUCCESS);
            result.setPayload(tasks);
        }
        return result;
    }


    // Fetch a task by ID
    public Result<Task> findTaskById(Long taskId) {
        Result<Task> result = new Result<>();
        Task task = taskRepository.findById(taskId);

        if (task == null) {
            result.setType(ResultType.NOT_FOUND);
            result.setMessage("Task not found.");
        } else {
            result.setType(ResultType.SUCCESS);
            result.setPayload(task);
        }
        return result;
    }


    // Add a new Task
    public Result<Task> addTask(Task task) {
        Result<Task> result = validate(task);
        if (!result.isSuccess()) {
            return result;
        }

        // Assuming the task_id is auto-generated by the database, do not set it
        int saveResult = taskRepository.save(task);

        if (saveResult > 0) {
            result.setType(ResultType.SUCCESS);
            result.setPayload(task);
        } else {
            result.setType(ResultType.ERROR);
            result.setMessage("Could not save the task.");
        }
        return result;
    }

    // Update an existing task
    public Result<Task> updateTask(Long taskId, Task task) {
        Result<Task> result = validate(task);
        if (!result.isSuccess()) {
            return result;
        }

        task.setTaskId(taskId); // Set the correct course ID
        int updateResult = taskRepository.update(task);

        if (updateResult > 0) {
            result.setType(ResultType.SUCCESS);
        } else {
            result.setType(ResultType.NOT_FOUND);
            result.setMessage("Task not found.");
        }

        return result;
    }

    // Delete a course by ID
    public Result<Void> deleteTaskById(Long taskId) {
        Result<Void> result = new Result<>();
        int deleteResult = taskRepository.deleteById(taskId);

        if (deleteResult > 0) {
            result.setType(ResultType.SUCCESS);
        } else {
            result.setType(ResultType.NOT_FOUND);
            result.setMessage("Task not found.");
        }

        return result;
    }

    private Result<Task> validate(Task task) {
        Result<Task> result = new Result<>();

        if (task.getTitle() == null || task.getTitle().trim().isEmpty()) {
            result.setType(ResultType.INVALID);
            result.setMessage("Task title is required.");
            return result;
        }

        if (task.getDescription() == null || task.getDescription().trim().isEmpty()) {
            result.setType(ResultType.INVALID);
            result.setMessage("Task description is required.");
            return result;
        }

        if (task.getStatus() == null || task.getStatus().trim().isEmpty()) {
            result.setType(ResultType.INVALID);
            result.setMessage("Status must be set");
            return result;
        }

        result.setType(ResultType.SUCCESS);
        return result;
    }
}